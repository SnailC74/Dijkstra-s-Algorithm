import java.util.*; 
import java.lang.*; 
import java.io.*; 
  
class ShortestPath { 
    static final int V = 9; 
    int minDistance(int dist[], Boolean sptSet[]) { 
        int min = Integer.MAX_VALUE, min_index = -1; 
  
        for (int i = 0; i < V; i++) {
            if (sptSet[i] == false && dist[i] <= min) { 
                min = dist[i]; 
                min_index = i; 
            } 
        return min_index; 
    } 

    void printSolution(int dist[]) { 
        System.out.println("Vertex \t\t Distance from Source"); 
        for (int i = 0; i < V; i++) 
            System.out.println(i + " \t\t " + dist[i]); 
    } 

    void Dijkstra(int graph[][], int src) { 
        int dist[] = new int[V];
        Boolean sptSet[] = new Boolean[V]; 

        for (int i = 0; i < V; i++) { 
            dist[i] = Integer.MAX_VALUE; 
            sptSet[i] = false; 
        } 
  
        dist[src] = 0; 
        for (int count = 0; count < V - 1; count++) { 
            int j = minDistance(dist, sptSet); 
            sptSet[j] = true; 
            for (int k = 0; k < V; k++) {
                if (!sptSet[k] && graph[j][k] != 0 && dist[j] != Integer.MAX_VALUE && dist[j] + graph[j][k] < dist[k]) 
                    dist[k] = dist[j] + graph[j][k]; 
            }
        } 
        printSolution(dist); 
    } 

    public static void main(String[] args) 
    { 
        int graph[][] = new int[][] { { 0, 2, 0, 0, 0, 0, 0, 5, 0 }, 
                                      { 2, 0, 8, 0, 0, 0, 0, 12, 0 }, 
                                      { 0, 8, 0, 7, 0, 1, 0, 0, 3 }, 
                                      { 0, 0, 7, 0, 9, 15, 0, 0, 0 }, 
                                      { 0, 0, 0, 9, 0, 8, 0, 0, 0 }, 
                                      { 0, 0, 1, 15, 8, 0, 2, 0, 0 }, 
                                      { 0, 0, 0, 0, 0, 2, 0, 1, 7 }, 
                                      { 5, 12, 0, 0, 0, 0, 1, 0, 8 }, 
                                      { 0, 0, 3, 0, 0, 0, 7, 8, 0 } }; 
        ShortestPath t = new ShortestPath(); 
        t.Dijkstra(graph, 0); 
    } 
} 
