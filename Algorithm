#include <limits.h> 
#include <stdio.h> 
#define V 9 
  
int minDistance(int dist[], bool sptSet[]) 
{ 
    int min = INT_MAX, min_index; 
    for (int i = 0; i < V; i++) 
        if (sptSet[i] == false && dist[i] <= min) {
            min = dist[i], min_index = i; 
        }
    return min_index; 
} 

void printSolution(int dist[]) 
{ 
    printf("Vertex \t\t Distance from Source\n"); 
    for (int i = 0; i < V; i++) 
        printf("%d \t\t %d\n", i, dist[i]); 
} 

void dijkstra(int graph[V][V], int src) 
{ 
    int dist[V]; 
    bool sptSet[V];
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX, sptSet[i] = false; 
    }
    dist[src] = 0; 
    for (int count = 0; count < V - 1; count++) { 
        int j = minDistance(dist, sptSet); 
        sptSet[j] = true; 
        for (int i = 0; i < V; i++) {
            if (!sptSet[i] && graph[j][i] && dist[j] != INT_MAX && dist[j] + graph[j][i] < dist[i]) {
                dist[i] = dist[j] + graph[j][i]; 
            }
        }
    } 
    printSolution(dist); 
} 

int main() 
{ 
    int graph[V][V] = { { 0, 2, 0, 0, 0, 0, 0, 5, 0 }, 
                        { 2, 0, 8, 0, 0, 0, 0, 12, 0 }, 
                        { 0, 8, 0, 7, 0, 1, 0, 0, 3 }, 
                        { 0, 0, 7, 0, 9, 15, 0, 0, 0 }, 
                        { 0, 0, 0, 9, 0, 8, 0, 0, 0 }, 
                        { 0, 0, 1, 15, 8, 0, 2, 0, 0 }, 
                        { 0, 0, 0, 0, 0, 2, 0, 1, 7 }, 
                        { 5, 12, 0, 0, 0, 0, 1, 0, 8 }, 
                        { 0, 0, 3, 0, 0, 0, 7, 8, 0 } }; 
    dijkstra(graph, 0); 
  
    return 0; 
} 

